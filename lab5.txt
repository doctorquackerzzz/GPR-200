// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}
sScalar square(sScalar sq)
{
    return sq*sq;
}

sScalar distFunction(sPoint a, sPoint b)
{
    return distance(a,b);
}
//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}

//Rotation along Z, source utilized from: https://gist.github.com/onedayitwillmake/3288507
mat4 rotationZ( in float angle ) {
	return mat4(	cos(angle),		-sin(angle),	0,	0,
			 		sin(angle),		cos(angle),		0,	0,
							0,				0,		1,	0,
							0,				0,		0,	1);
}

//------------------------------------------------------------
// RENDERING FUNCTIONS
vec4 crossFadeFunc (in vec2 loc)
{
    return vec4(mix(texture(iChannel0, loc), texture(iChannel1, loc), abs(sin(iTime / 2.0))));
}

//NOT MINE :: JUST CONFIGURED TO FIT SHADERTOY PROGRAM
//Source used https://adrianboeing.blogspot.com/2011/02/ripple-effect-in-webgl.html
sCoord Ripples(in sCoord loc, in sCoord uv)
{
    vec2 cPos = -3.0 + 2.0 * uv;
    float cLength = length(cPos);
    vec2 newUV = uv+(cPos/cLength)*cos(cLength*30.0-iTime*10.0) * 0.03;
    return newUV;
}

struct lights
{
    vec4 center;
    vec4 color;
    float intensity;
};

bool initLights(out lights lighting, in vec3 center, in vec3 color, in float intensity)
{
    lighting.center = asPoint(center);
	lighting.color = asPoint(color);
	lighting.intensity = intensity;
    return true;
    
    
}

vec4 lambertShading (in sCoord loc, in lights lighting, in sampler2D iChannel0)
{
	//both taken from assignment
	vec3 surfPos = vec3(loc, -1.0);
	vec3 normal = normalize(vec3(loc, 1.0));

	//light position
	vec4 lightPos = normalize(lighting.center - asPoint(surfPos));
        //diffusion coefficient
    float diffusionCoeff = max(0.0, dot(asPoint(normal), lightPos));

	//attenuation
	float dist = distFunction(asPoint(surfPos), lighting.center);
	float attenuation = 1.0 / (1.0 + dist / lighting.intensity + square(dist) / square(lighting.intensity));

	//returning diffusion Intensity with texture
	return texture(iChannel0, loc) * diffusionCoeff * lighting.color;

	

	
}


color4 cubeMap(in sRay ray, in samplerCube channel2)
{
    ray.direction = ray.direction * rotationZ(iTime);
    return texture(channel2,ray.direction.xyz);
}
// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    vec2 uv = vp.pixelCoord.xy/iResolution.xy;
    // test inputs
    //return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
    //return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);
    //return vp.viewportPoint;
    
    //const color
    //return vec4(1.0, 0.0, 0.0, 1.0);
    
    //texture (full screen)
    //sampler2D tex = iChannel0;
    
    sCoord px = vp.pixelCoord;
    sDCoord res = iChannelResolution[0].xy;
    sScalar ratio = res.y * vp.resolutionInv.y;
    sCoord loc = px / res;
    loc = ratio * loc + 0.1 * iTime;
    //return texture(iChannel0,loc); //full rgba
    //return texture(iChannel0,loc).rrrr; //greyscale
    
    //Uncomment for Cross Fade Effect
    //return crossFadeFunc(loc);
    
    //ripples function
    //uv = Ripples(loc, uv);
    //return texture(iChannel0, uv);
    
    //light test
    //return vp.viewportPoint;
    //return vec4 (0.0, 0.0, 1.0, 1.0);
    //return vec4(normalize(vec3 (vp.viewportPoint.xy, 1.0)),1.0);
    //lights lighting;
    //initLights(lighting, vec3(4.0, 2.0, 0.25), vec3(1.0, 1.0, 1.0), 1.0);
    //return lambertShading(loc, lighting, iChannel0);
    
    //CUBE MAP
    //
    //vec3 cubeLoc = ray.direction.xyz;
    
    //return texture(iChannel1, cubeLoc);
    
    return cubeMap(ray,iChannel2);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}

