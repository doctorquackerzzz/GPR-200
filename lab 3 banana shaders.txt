//void mainImage( out vec4 fragColor, in vec2 fragCoord )
//{
    // Normalized pixel coordinates (from 0 to 1)
    //vec2 uv = fragCoord/iResolution.xy;

    // Time varying pixel color
    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    //fragColor = vec4(col,1.0);
//}

struct hit_record {
    vec3 point;
    vec3 normal;
    float temporary;
    bool front_face;
};
    
struct sphere{
	vec3 center;
    float radius;
};
    
struct cam{
        vec3 horizontal;
    vec3 vertical;
    vec3 lowerLeftCorner;
};

void set_face_normal(vec4 rayDirection, vec4 rayOrigin, vec3 outward_normal, out hit_record rec)
{
    rec.front_face = dot(rayDirection.xyz, outward_normal) < 0.0;
    //normal = front_face ? outward_normal :-outward_normal;
    if(rec.front_face)
    {
        rec.normal = outward_normal;
    }
    else
    {
        rec.normal = -outward_normal;
        
    }
}

void set_cam(out cam camera, vec4 origin, float viewportWidth, float viewportHeight, float focal_length)
{
    camera.horizontal = vec3(viewportWidth, 0.0, 0.0);
    camera.vertical= vec3 (0.0, viewportHeight, 0.0);
    camera.lowerLeftCorner = origin.xyz - camera.horizontal/2.0 - camera.vertical/2.0 - vec3(0.0, 0.0, focal_length);
}
// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}

vec4 unit_vector(in vec4 vector)
{
 	   return vector/length(vector);
}
vec3 unit_vector(in vec3 vector)
{
 	   return vector/length(vector);
}

float lenSq(in vec3 x)
{
    return dot(x,x);
}
float lenSq(in vec4 y)
{
    return dot (y,y);
}

bool hit(vec3 center, float radius, vec4 rayDirection, vec4 rayOrigin, float temp_max, float temp_min, out hit_record rec)
{
    vec3 distanceBetweenOriAndCen = rayOrigin.xyz - center;
    float a = lenSq(rayDirection);
    float half_b = dot(distanceBetweenOriAndCen, rayDirection.xyz);
    float c = lenSq(distanceBetweenOriAndCen) - radius*radius;
    float discriminant = half_b*half_b - a*c;

    if (discriminant > 0.0) {
        float root = sqrt(discriminant);

        float temp = (-half_b - root) / a;
        if (temp < temp_max && temp > temp_min) {
            rec.temporary = temp;
            rec.point = rayOrigin.xyz + (rec.temporary * rayDirection.xyz);
            vec3 outward_normal = (rec.point - center) / radius;
            set_face_normal(rayDirection, rayOrigin, outward_normal, rec);
            return true;
        }

        temp = (-half_b + root) / a;
        if (temp < temp_max && temp > temp_min) {
            rec.temporary = temp;
            rec.point = rayOrigin.xyz + ( rec.temporary * rayDirection.xyz );
            vec3 outward_normal = (rec.point - center) / radius;
            set_face_normal(rayDirection, rayOrigin, outward_normal, rec);
            return true;
        }
    }

    return false;
}


bool hittable (vec4 rayDirection, vec4 rayOrigin, out float temp_max, float temp_min, out hit_record rec, sphere test)
{
    hit_record temp_rec;
    bool hitAnything = false;
    if (hit(test.center, test.radius, rayDirection, rayOrigin, temp_max, temp_min, temp_rec))
    {
        hitAnything = true;
        temp_max = temp_rec.temporary;
        rec = temp_rec;
    }
        
    //return (discriminant > 0.0);
    return hitAnything;
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin, in sphere sphereArray[2])
{
   
   hit_record rec;
    float temp_max = 1.0/0.0;
    
    bool testOne = hittable(rayDirection, rayOrigin, temp_max, 0.0, rec, sphereArray[0]);
    bool testTwo = hittable(rayDirection, rayOrigin, temp_max, 0.0, rec, sphereArray[1]);
    if (testOne || testTwo)
    {
     	 return 0.5 *(vec4(rec.normal, 1.0) + vec4(1.0));
    }
    vec4 unitDirection = unit_vector(rayDirection);

    float hit = 0.5 * (unitDirection.y + 1.0);

    rayDirection = mix(vec4(1.0), vec4(0.5, 0.7, 1.0, 1.0), hit);
    
    return rayDirection;
}

float randomGen(vec2 rand)
{
    int n = int(rand.x * 40.0 + rand.y * 6400.0);
    n = (n << 13) ^ n;
    return 1.0 - float( (n * (n * n * 15731 + 789221) + \ 1376312589) & 0x7fffffff) / 1073741824.0;
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;
    cam camera;
    
    const float samples_per_pixel = 100.0;
	sphere testSphere1;
    sphere testSphere2;

    testSphere1.center = vec3(0.0, 0.0, -1.0);
    testSphere2.center = vec3(0.0, -100.5, -1.0);

    testSphere1.radius = 0.5;
    testSphere2.radius = 100.0;

	//sphere array
    sphere sphereArray[2] = sphere[2](testSphere1, testSphere2);
    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin,
            viewport, focalLength);
    set_camera(camera, rayOrigin, aspect*viewportHeight, viewportHeight, focalLength);
    
    vec4 build;
    
    for (float iTemp = 0.0; i < samples_per_pixel; i++)
    {
        float ultra = (fragCoord.x + randomGen(fragCoord)) / ((viewportHeight.aspect) - 1.0);
        float violet = (fragCoord.x + randomGen(fragCoord)) / (viewportHeight- 1.0);
        rayDirection = vec4(camera.lowerLeftCorner + ultra * camera.horizontal + violet * camera_vertical, 1.0) - rayOrigin;
        calcRay(rayDirection, rayOrigin, viewport, focalLength);
        
        build += calcColor(rayDirection, rayOrigin, sphereArray);
    }
    
    float scale = 1.0 / samples_per_pixel;
    
    build.x = clamp(build.x *= scale, 0.0, .999);
    build.y = clamp(build.y *= scale, 0.0, .999);
    build.z = clamp(build.z *= scale, 0.0, .999);

    // color
    fragColor = build;

    // TEST COLOR:
    //  -> what do the other things calculated above look like?
    //fragColor = vec4(viewport, 0.0, 0.0);
    //fragColor = vec4(ndc, 0.0, 0.0);
    //fragColor = vec4(uv, 0.0, 0.0);
}


