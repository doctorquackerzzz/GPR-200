#version 300 es
//#version 400

 #ifdef GL_ES
 precision highp float;
 #endif
 layout (location = 0) out vec4 rtFragColor;
 
  in vec4 vColor;

//PER FRAGMENT
in vec4 vNormal;
in vec4 vTexcoord;
  
//LIGHT CREATION
//struct of the light elements
//		lcenter: center of the light source
//      lcolor: color of the light source
//      lintensity: intensity of the light source
struct light
{
	vec4 lcenter;
	vec4 lcolor;
	float lintensity;
};
float square (float x)
{
	return x*x;
}

void initLight(out light lighter, in vec3 center, in vec3 color, in float intensity)
{
	lighter.lcenter = vec4(center, 1.0);
	lighter.lcolor = vec4(color, 1.0);
	lighter.lintensity = intensity;
}

vec4 lambertReflectionCalc (light lighter, vec4 rayOrigin, vec3 position, vec3 normal, vec4 color,vec4 rayDirection)
{
	//LAMBERTIAN REFLECTION
    //
    //Part 1: Diffusion Coefficient
    vec3 lightVec = normalize(lighter.lcenter.xyz - rayDirection.xyz);
	float diffCoef = max(0.0, dot(normal, lightVec)); // the diffusion coefficient is equal to the maximum dot product of the normal and the light vector
    
    //
    //Part 2: Attenuation
    //source: The GLSL SuperBible (https://f.usemind.org/files/b/1/UseMind.ORG_comprehensive-tutorial-and-reference_2015__.pdf)
    //
    float distance = length(rayDirection.xyz - lightVec); //the distance is equal to the length of ray direction minus the light vector
    float attenuation = 6.0 / (square(distance) + 0.0); //attenuation is equal to a number divided by the distance squared plus however much you want to move the distance
    
    //
    //Part 3: Intensity of Diffusion
    //
    
	vec4 diffIntensity = diffCoef* color * lighter.lcolor * attenuation; //the diffusion intensity is equal to the diffusion coefficient times the natural color, times the light color, times the attenuation
    
    //
    //BLINN-PHONG REFLECTANCE
    //
    vec3 rayView = normalize(rayOrigin.xyz - rayDirection.xyz); // the ray's view is equal to the normalized value of the ray's origin minus the ray's direction
    //
    vec3 halfway = normalize(lightVec + rayView); // the halfway vector is equal to the normalization of the light vector plus the ray view
    float spCoeffPlus = pow(max(0.0, dot(normal, halfway)), 256.0); // the spatial coefficient for Blinn-Phong is equal to the pow of the maximum dot product of normal and the halfway vector, as well as a uinputted number by the coder
    
    //
    //SHINY NEW COLOR OWO (disregard that, it's ecstaticness)
    //
     vec4 shinyNewColor = 0.03 * vec4(0.8, 0.4, 0.2, 1.0) + (diffIntensity * color + spCoeffPlus * vec4(0.2, 0.4, 0.8, 1.0)) * lighter.lcolor;  
     return shinyNewColor;
}
in vec4 vPosition;

   void main ()
   {
   //PER VERTEX
   //rtFragColor = vColor;

   //PER FRAGMENT
   vec4 N = normalize(vNormal);

//light configuration
light lighterA, lighterB,lighterC;
initLight(lighterA, vec3(-1.0,0.0,0.0),vec3(1.0,1.0,1.0),10.0);
	initLight(lighterB, vec3(0.0,-1.0,1.0),vec3(1.0,1.0,1.0),10.0);
	initLight(lighterC, vec3(1.0,0.0,-1.0),vec3(1.0,1.0,1.0),10.0);

   //rtFragColor = vec4(N.xyz * 0.5 + 0.5, 1.0);
   rtFragColor = vTexcoord;
   } 