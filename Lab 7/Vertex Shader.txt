#version 300 es
//#version 400

//Main Duty: process VERTEX ATTRIBUTES
// 3D Point in Space
//normal vector
//uv : texture coordinate
//OBJECT SPACE
layout (location = 0) in vec4 aPosition;
layout (location = 1) in vec3 aNormal;
//in vec4 aPosition
//TEXTURE SPACE
//layout (location = 2) in vec2 aTexcoord;
layout (location = 2) in vec4 aTexcoord;

//transformation uniforms
uniform mat4 uModelMat;
uniform mat4 uViewMat;
uniform mat4 uProjMat;
uniform mat4 uViewProjMat;
//out vec4 vColor;

//PER FRAGMENT
out vec4 vNormal;

out vec4 vTexcoord;
void main()
{
//gl_Position = aPosition;

//position in world space (not yet correct)
vec4 pos_world = uModelMat * aPosition;
//gl_Position = pos_world;

//position in camera space (still not working)
//vec4 pos_view = uViewMat* pos_world;
//gl_Position = pos_view

//POSITION PIPELINE
mat4 modelViewMat = uViewMat * uModelMat;
vec4 pos_view = modelViewMat * aPosition;
vec4 pos_clip = uProjMat * pos_view;
gl_Position = pos_clip;

//NORMAL PIPELINE
mat3 normalMat = inverse(transpose(mat3(modelViewMat)));
vec3 nrm_view = normalMat * aNormal;


//TEX COORD PIPLINE
mat4 atlasMat = mat4(1.0, 0.0, 0.0,0.0
		     0.0, 0.5, 0.0, 0.0	
		     0.0, 0.0, 1.0, 0.0
		     0.25, 0.25, 0.0, 1.0);
vec4 uv_atlas = atlasMat * aTexcoord;


vec4 pos_clip = uProjMat * pos_view;
//vec4 pos_clip = uViewProjMat * pos_world;
gl_Position = pos_clip;


//vColor = pos_view;

//POSITION PIPELINE


//PER VERTEX
//vColor = aPosition;
// example: output normal as if it's color
//vColor = vec4(aNormal *0.5 + 0.5, 1.0);

//PER FRAGMENT
//vNormal = vec4(aNormal, 0.0);
vNormal = vec4(nrm_view, 0.0);

//vTexcoord = aTexcoord;
vTexcoord = uv_atlas;

//gl_Position = uProjMat*modelViewMat*aTexcoord;
}